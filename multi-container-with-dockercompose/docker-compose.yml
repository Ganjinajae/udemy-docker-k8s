# docker compose의 버전
version: '3.8'

services:
  mongodb:  
    image: 'mongo'
    # volume은 command 그대로 추가하면 됨
    volumes:
      - data:/data/db
    # environment:
    #   # MONGO_INITDB_ROOT_USERNAME: max
    #   - MONGO_INITDB_ROOT_USERNAME=max
    #   - MONGO_INITDB_ROOT_PASSWORD=secret
    # env_file 추가하는 것과 위 environment는 같다.
    env_file:
      - ./env/mongo.env
    # 이런 식으로 network를 추가할 수 있으나 추가해도 되지 않은 이유는
    # services 밑으로 만드는 service들은 같은 네트워크로 추가한다.
    # networks:
    #   - multi-setup
  backend:
    build: ./backend
    # build: 
    #   context: ./backend # context는 복사할 폴더를 포함하는 폴더로 설정되어야 한다. 예를 들어 Dockerfile이 내부 중첩된 폴더에 있다면 그 상위 레벨의 경로를 써야한다.
    #   dockerfile: Dockerfile # file명이 Dockerfile면 굳이 안 써도 되는데 다른 name이면 필요하다. ex) Dockerfile-dev
    #   args:
    #     some-arg: 1
    ports:
      - '80:80'
    volumes:
      - logs:/app/logs
      - ./backend:/app # bind mount -> yaml 파일 기준으로 상대 경로로 작성
      - /app/node_modules
    env_file:
      - ./env/backend.env
    # 단일로 command로 할 때는 문제 없는데 여러 컨테이너를 띄우다보니 꼬이는 경우를 방지하기 위해 의존성을 가진 것들을 표기한다. depends_on의 리스트 항목들을 실행한 후에 실행하게끔
    depends_on:
      - mongodb
  frontend:
    build: ./frontend
    ports:
      - '3000:3000'
    volumes:
      - ./frontend/src:/app/src
    stdin_open: true
    tty: true
    depends_on:
      - backend
# service에서 사용하는 명명된 volume은 services에 동등한 들여쓰기 수준에서
# volumes에 명시해야한다.
# docker가 services를 위해 생성해야 하는 명명된 볼륨을 인식하기 위해 필요한 구문
# 다른 서비스에서 동일한 볼륨 이름을 사용하면 그 볼륨이 공유된다.
# 따라서 다른 컨테이너가 호스팅 머신 상의 동일한 볼륨 동일한 폴더를 사용할 수 있다.
# 익명 volume이나 바인드 마운트를 쓰는 경우 명시할 필요 없음
volumes:
  data:
  logs:

  # frontend: